openapi: 3.0.3
info:
  title: Aroma Coffee Store API
  description: API for managing coffee, customers, and orders at Aroma Coffee Store.
  version: 1.0.0
servers:
  - url: http://localhost:20080
    description: Local development server

paths:
  /coffees:
    get:
      summary: List all coffees
      operationId: listCoffees
      tags:
        - coffee
      responses:
        '200':
          description: A list of coffees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Coffee'
    post:
      summary: Add a new coffee
      operationId: createCoffee
      tags:
        - coffee
      requestBody:
        description: Coffee object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coffee'
      responses:
        '201':
          description: Coffee created
    patch:
      summary: Update a coffee
      operationId: updateCoffee
      tags:
        - coffee
      requestBody:
        description: Coffee object with updated data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coffee'
      responses:
        '200':
          description: Coffee updated
    delete:
      summary: Delete a coffee by name
      operationId: deleteCoffee
      tags:
        - coffee
      parameters:
        - name: coffee_name
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Coffee deleted

  /coffees/{name}:
    get:
      summary: Get a coffee by name
      operationId: getCoffeeByName
      tags:
        - coffee
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Coffee details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coffee'

  /customers:
    get:
      summary: List all customers
      operationId: listCustomers
      tags:
        - customer
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      summary: Add a new customer
      operationId: createCustomer
      tags:
        - customer
      requestBody:
        description: Customer object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer created
    patch:
      summary: Update a customer
      operationId: updateCustomer
      tags:
        - customer
      requestBody:
        description: Customer object with updated data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated
    delete:
      summary: Delete a customer by name
      operationId: deleteCustomer
      tags:
        - customer
      parameters:
        - name: customer_name
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer deleted

  /customers/{name}:
    get:
      summary: Get a customer by name
      operationId: getCustomerByName
      tags:
        - customer
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

  /orders:
    get:
      summary: List all orders
      operationId: listOrders
      tags:
        - order
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Add a new order
      operationId: createOrder
      tags:
        - order
      requestBody:
        description: Order object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created
    patch:
      summary: Update an order by order_id
      operationId: updateOrder
      tags:
        - order
      parameters:
        - name: order_id
          in: query
          required: true
          schema:
            type: string
      requestBody:
        description: Order object with updated data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated
    delete:
      summary: Delete an order by order_id
      operationId: deleteOrder
      tags:
        - order
      parameters:
        - name: order_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order deleted

  /orders/{order_id}:
    get:
      summary: Get an order by order_id
      operationId: getOrderById
      tags:
        - order
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/status/{status}:
    get:
      summary: "Get all orders by status"
      description: "Return all orders filtered by their status"
      operationId: "getOrdersByStatus"
      parameters:
        - name: "status"
          in: "path"
          required: true
          schema:
            type: "string"
            enum: ["returned", "canceled", "delivered", "shipped", "in_progress", "pending"]
      responses:
        '200':
          description: "A list of orders filtered by status"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Order"
        '404':
          description: "No orders found for the specified status"
  /orders/customer/{customer_name}:
    get:
      summary: "Get all orders for a customer by name"
      description: "Return all orders placed by a specific customer"
      operationId: "getOrdersByCustomer"
      parameters:
        - name: "customer_name"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: "A list of orders for the customer"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Order"
        '404':
          description: "No orders found for the specified customer"

  /orders/coffee/{coffee_name}:
    get:
      summary: "Get all orders by coffee name, optionally filtered by status"
      description: "Return all orders containing a specific coffee, optionally filtering by order status"
      operationId: "getOrdersByCoffee"
      parameters:
        - name: "coffee_name"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "status"
          in: "query"
          required: false
          schema:
            type: "string"
            enum: ["returned", "canceled", "delivered", "shipped", "in_progress", "pending"]
      responses:
        '200':
          description: "A list of orders containing the coffee, optionally filtered by status"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Order"
        '404':
          description: "No orders found for the specified coffee or status"

components:
  schemas:
    Coffee:
      type: object
      properties:
        name:
          type: string
          example: "Espresso"
        description:
          type: string
          example: "A strong and bold coffee."
        quantity:
          type: number
          format: float
          example: 12.0
        origin:
          type: string
          example: "Colombia"
        packaging_data:
          type: string
          example: "Vacuum sealed"
        price:
          type: number
          format: float
          example: 9.99

    Customer:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        comments:
          type: string
          example: "Prefers dark roast"
        address:
          type: string
          example: "123 Coffee Lane"
        city:
          type: string
          example: "Brewtown"
        state:
          type: string
          example: "CA"
        zip:
          type: string
          example: "90210"

    Order:
      type: object
      properties:
        order_id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        delivery_date:
          type: string
          format: date
          example: "2024-09-30"
        customer_name:
          type: string
          example: "John Doe"
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/Coffee'
        sale_price:
          type: number
          format: float
          example: 19.99
        status:
          type: string
          enum:
            - returned
            - canceled
            - delivered
            - shipped
            - in_progress
            - pending
          example: "pending"

